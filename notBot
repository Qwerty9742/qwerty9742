from aiogram import Bot, executor, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

token = "???"

bot = Bot(token="???")
dp = Dispatcher(bot=bot)

kb_client = ReplyKeyboardMarkup()
b1 = KeyboardButton("1")
b2 = KeyboardButton("2")
b3 = KeyboardButton("3")
b4 = KeyboardButton("4")
b0 = KeyboardButton("0")

kb_client.row(b1, b2)
kb_client.row(b3, b4)
kb_client.add(b0)

@dp.message_handler(commands=["start"])
async def cmd_start(msg: types.Message) -> None:
    await msg.answer(f"Приветствуем, {msg.from_user.first_name}! Это решатор, который поможет вам с некоторыми математическими задачами", reply_markup=kb_client)
    await msg.answer("Мы можем помочь вам со следующими пунктами:")
    await msg.answer("1. Решение линейных уравнений")
    await msg.answer("2. Решение квадратных уравнений")
    await msg.answer("3. Построение арифметической прогрессии")
    await msg.answer("4. Арифметические операции с дробями")
    await msg.answer("Введите номер интересующего вас пункта")

# РЕШЕНИЕ ЛИНЕЙНОГО УРАВНЕНИЯ
@dp.message_handler(lambda msg: msg.text == "1")
async def choice_1(msg: types.Message) -> None:
    await msg.answer("Общий вид линейного уравнения: ax + b = 0")
    await msg.answer("Введите значения коэффициентов a и b через пробел")
    @dp.message_handler()
    async def values_1(msg: types.Message) -> None:
        a, b = map(int, msg.text.split())
        if a != 0:
            x = -b / a
            await msg.answer(f"Ответ: x = {x}")
        else:
            await msg.answer("В линейном уравнении коэффициент a не может быть равен нулю.")


# РЕШЕНИЕ КВАДРАТНОГО УРАВНЕНИЯ
@dp.message_handler(lambda msg: msg.text == "2")
async def choice_2(msg: types.Message) -> None:
    await msg.answer("Общий вид квадратного уравнения: ax^2 + bx + c = 0")
    await msg.answer("Введите значения коэффициентов a, b и c через пробел")
    @dp.message_handler()
    async def values_2(msg: types.Message) -> None:
        a, b, c = map(int, msg.text.split())
        if a != 0:
            D = b ** 2 - 4 * a * c
            if D > 0:
                x1 = (-b + D ** 0.5) / (2 * a)
                x2 = (-b - D ** 0.5) / (2 * a)
                await msg.answer(f"Ответ: x1 = {x1}, x2 = {x2}")
            elif D == 0:
                x = -b / (2 * a)
                await msg.answer(f"Ответ: x = {x}")
            else:
                await msg.answer(f"Данное уравнение не имеет решений")
        else:
            await msg.answer("В квадратном уравнении коэффициент a не может быть равен нулю.")

# РАБОТА С АРИФМЕТИЧЕСКОЙ ПРОГРЕССИЕЙ
@dp.message_handler(lambda msg: msg.text == "3")
async def choice_3(msg: types.Message) -> None:
    await msg.answer("Введите значение первого элемента прогрессии")
    start = int(input())
    await msg.answer("Введите значение разности между соседними элементами")
    step = int(input())
    await msg.answer('Выберите один из трех пунктов, введя соответствующий номер')
    await msg.answer("1. Вывести все элементы прогрессии")
    await msg.answer("2. Вывести номер элемента прогрессии, равного определенному значению")
    await msg.answer("3. Вывести значение элемента прогрессии под определенным номером")
    choice = input()
    if choice == "1":
        await msg.answer("Введите количество элементов в прогрессии")
        await msg.answer('Получившая арифметическая прогрессия:')
        elements = int(input())
        for i in range(start, start + (elements - 1) * step + 1, step):
            await msg.answer(i, end=" ")
        await msg.answer()
    elif choice == "2":
        await msg.answer("Введите значение элемента прогрессии:")
        value = int(input())
        if (value - start) % step == 0:
            number = 1
            while start < value:
                start += step
                number += 1
            await msg.answer(f"Элемент со значением {value} находится под номером {number}")
        else:
            await msg.answer(f"Значение {value} отсутствует в данной арифметической прогрессии.")
    elif choice == "3":
        await msg.answer("Введите номер элемента прогрессии:")
        number = int(input())
        if number > 0:
            value = start + (step * (number - 1))
            await msg.answer(f"Элемент под номером {number} имеет значение {value}")
        else:
            await msg.answer("Введите положительный номер.")
    else:
        await msg.answer("Такой опции не существует.")

# ОПЕРАЦИИ С ДРОБЯМИ
@dp.message_handler(lambda msg: msg.text == "4")
async def choice_4(msg: types.Message) -> None:
    await msg.answer("Введите числитель и знаменатель первой дроби через пробел")
    x1, y1 = map(int, input().split())
    await msg.answer("Введите числитель и знаменатель второй дроби через пробел")
    x2, y2 = map(int, input().split())
    if y1 == 0 or y2 == 0:
        await msg.answer("Знаменатель дроби не может равняться 0.")
    else:
        await msg.answer('Введите номер операции, которую вы хотите применить к данным дробям')
        await msg.answer("1. +")
        await msg.answer("2. -")
        await msg.answer("3. *")
        await msg.answer("4. /")
        choice = input()
        if choice == "1":
            x3 = x1 * y2 + x2 * y1
            y3 = y1 * y2
            await msg.answer(f"{x1}/{y1} + {x2}/{y2} =", end=" ")
        elif choice == "2":
            x3 = x1 * y2 - x2 * y1
            y3 = y1 * y2
            await msg.answer(f"{x1}/{y1} - {x2}/{y2} =", end=" ")
            flag = False
        elif choice == "3":
            x3 = x1 * x2
            y3 = y1 * y2
            await msg.answer(f"{x1}/{y1} * {x2}/{y2} =", end=" ")
        elif choice == "4":
            if x2 == 0:
                await msg.answer("Числитель второй дроби не может равняться 0.")
            else:
                x3 = x1 * y2
                y3 = y1 * x2
                await msg.answer(f"{x1}/{y1} / {x2}/{y2} =", end=" ")
        else:
            await msg.answer("Такой опции не существует.")
        if flag is True and x2 != 0 and choice in list("1234"):  # ["1", "2", "3", "4"]
            NOD = x3
            if y3 < x3:
                NOD = y3
            while not (x3 % NOD == 0 and y3 % NOD == 0):
                NOD -= 1
            x3 //= NOD
            y3 //= NOD
            await msg.answer(f"{x3}/{y3}")

# @dp.message_handler(lambda msg: msg.text == "0")
# async def choice_0(msg: types.Message) -> None:
#     await msg.answer("Такой опции не существует.")
#     await msg.answer("Благодарим вас за использование нашего сервиса! До встречи!")

@dp.message_handler(commands=["cancel"])
async def cmd_cancel(msg: types.Message) -> None:
    await msg.answer("Canceled", reply_markup=types.ReplyKeyboardRemove())

# @dp.message_handler()
# async def send_echo(msg: types.Message) -> None:
#     await msg.answer(msg.text)

if __name__ == "__main__":
    executor.start_polling(dispatcher=dp)
